import Head from "next/head";
import { projectBlocks, projectDatabase, projectPage } from "@/library/ProjectNotion";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
import { ParsedUrlQuery } from "querystring";
import Image from "next/image";
import TechBadge from "@/components/common/badge/TechBadge";
import { Key, useState } from "react";
import RenderBlock from "@/components/common/RenderBlock";
import ProjectCard from "@/components/common/ProjectCard";

interface IParams extends ParsedUrlQuery {
  id: string
}

const ProjectDetail:NextPage<any> = ({id, project, blocks}) => {
  const title: string = `Project | ${project.properties.Title.rich_text[0].plain_text}`;
  const name: string = project.properties.Name.title[0].plain_text;
  const imageUrl: string = project.properties.Image.files[0].name;
  const [IsHeading, setIsHeading] = useState<number[] | undefined[]>([undefined]);
  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <main className="w-4/5 mx-auto">
        <div className="w-full flex justify-center mt-20">
          <h1 className="w-4/5 text-5xl text-center font-semibold">{name}</h1>
        </div>
        <div className="flex justify-center itmes-center mt-16 mb-12">
          {project.properties.TechStacks.multi_select.map((tech: { name: string }, index: Key | null | undefined) => {
            return (
              <TechBadge key={index} title={tech.name} />
          )})}
        </div>
        <div className="mx-auto">
          <Image src={imageUrl} alt={title} width={1000} height={500} className="w-full rounded-3xl"/>
        </div>
        <div className="flex justify-end">
          <div className="w-2/3 mt-4 leading-loose">
            {blocks.map((block: any, index: any) => {
              return (
                  <RenderBlock key={index} block={block} setIsHeading={setIsHeading} />
                )})}
          </div>
          <div className="w-1/3 sticky">
            <ProjectCard />
          </div>
        </div>
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
  const { id } = context.params as IParams; 
  const page_result = await projectPage(id); 
  const { results } = await projectBlocks(id); 
  return {
    props: {
      id: id,
      project: page_result,
      blocks: results
    }
  }
}

export const getStaticPaths: GetStaticPaths = async () => {
  let { results } = await projectDatabase(); 
  return {
    paths: results.map((post) => { 
      return {
        params: { 
          id: post.id
        }
      }
    }),
    fallback: false
  }
} 

export default ProjectDetail;